version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "my code here"
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  pre-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: pre-test
          command: |
            echo "pre-test"
  test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            yum -y install tar gzip
            echo "what !"
            aws --version
            aws s3 ls 
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-20ef7de" --output text >> ~/project/.circleci/ansible/inventory.txt

                       
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-updated]
      - run: cd /home/circleci/project/frontend
      - run:
          name: Build front-end 
          command: |
            cd frontend
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-updated

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-updated
      - run:
          name: test front-end 
          command: |
            cd frontend
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: test back-end 
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-updated
      - run:
          name: scan front-end 
          command: |
            cd frontend
            npm install
            npm audit fix #to fix vulnerabilities
            npm audit --audit-level=critical

  scan-backend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: scan back-end 
          command: |
            cd backend
            npm install
            npm audit fix #to fix vulnerabilities
            # added standard-version@9.2.0 in pakage.json file to mitigate the vulnerability
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "uda-people-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=uda-people-frontend \
              --stack-name "uda-people-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            yum -y install tar gzip
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text >> ~/project/.circleci/ansible/inventory.txt
            echo ${CIRCLE_WORKFLOW_ID:0:7}
      - run:
         name: save backend url in memstash
         command: |
            BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text )
            curl -H "Content-Type: text/plain" -H "token: 0279bc18-c002-44d8-a814-575be01ed402" \
            --request PUT \
            --data 'https://$BACKEND_IP:3030' \
            https://api.memstash.io/values/Backend_URL  

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11

    steps:
      - checkout
      - add_ssh_keys:
           fingerprints:
             - "e9:b7:ef:6b:70:b2:56:dc:c8:41:d7:12:6c:b7:a9:7e"    # Add ssh keys with fingerprint #this is "uda-people key"
      - attach_workspace:       # attach workspace.
         at: ~/
      - run: cat ~/project/.circleci/ansible/inventory.txt   
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
      - run:
          name: Configure server
          command: |
            ansible-playbook ~/project/.circleci/ansible/configure-server.yml -i ~/project/.circleci/ansible/inventory.txt 
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
  
      - run:
          name: Run migrations
          command: |
            pwd
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"

            cd backend
            npm install
            npm run migrations > migration-${CIRCLE_WORKFLOW_ID}.txt
            cat migration-${CIRCLE_WORKFLOW_ID}.txt

      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            if grep -q "No migrations are pending" migration-${CIRCLE_WORKFLOW_ID}.txt
            then
              echo "yes!!"
              curl -H "Content-Type: text/plain" -H "token: 128e3fb9-9c9d-48a6-b850-9068b69bafe2" \
              --request PUT \
              --data 'pushed successfully to memstach ,no pending migration' \
              https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID:0:7}
              
            elif grep -q "has been executed successfully" migration-${CIRCLE_WORKFLOW_ID}.txt
            then
              echo "brdo yes!!"
              curl -H "Content-Type: text/plain" -H "token: 128e3fb9-9c9d-48a6-b850-9068b69bafe2" \
              --request PUT \
              --data 'pushed successfully to memstach, first migration' \
              https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID:0:7}
            else
             echo "no!"
            fi
            # Your code here
            # exit 0
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0 #docker image that support aws cli
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-updated
      - run:
          name: Install dependencies (aws cli)
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://18.236.164.143:3030"
            #export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
      - run:
          name: move frontend objects to S3
          working_directory: ./frontend
          command: |
            #aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws s3 cp ./dist "s3://udapeople-20ef7de" --recursive
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11 # Docker image here that supports Ansible
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - add_ssh_keys:
           fingerprints:
             - "e9:b7:ef:6b:70:b2:56:dc:c8:41:d7:12:6c:b7:a9:7e"    # Add ssh keys with fingerprint #this is "uda-people key"
      - attach_workspace:       # attach workspace.
         at: ~/
      - run: cat ~/project/.circleci/ansible/inventory.txt   
      - run:
          name: Install dependencies (ansible package)
          command: |
            apk add --update ansible
            apk add --update tar gzip
      - run:
          name: Deploy backend
          working_directory: /root/project/backend
          command: |
            pwd
            ls -la
            tar czf backend.tar.gz backend
            ansible-playbook ~/project/.circleci/ansible/deploy-backend.yml -i ~/project/.circleci/ansible/inventory.txt 
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11 # Lightweight Docker image 
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli #docker image that support aws cli 
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cleanup:
      docker:
        - image: amazon/aws-cli #docker image that support aws cli
      steps:
        # Checkout code from git
        - run:
            name: Get old stack workflow id
            command: |
              # your code here
              export OldWorkflowID="the id here"
              export STACKS=[] #put the list of stacks here
        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                # your code here
              fi
          
workflows:
  default:
    jobs:
      - pre-test:
          filters:
            branches:
              only: [test-feature-branch]
      - test:
          filters:
            branches:
              only: [test-feature-branch]
#     - build-frontend:
#        context:
#         - SLACK_ACCESS_TOKEN
#     - build-backend
#     - test-frontend:
#         requires: [build-frontend]
#     - test-backend:
#         requires: [build-backend]
#     - scan-backend:
#          requires: [build-backend]
#     - scan-frontend:
#         requires: [build-frontend]
#     - deploy-infrastructure:
#         requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#         requires: [pre-test]
#         filters:
#           branches:
#             only: [test-feature-branch]
#     - configure-infrastructure:
#        requires: [test]    #require ,deploy-infrastructure ,test
#     - run-migrations:
#        requires: [pre-test]  #,require configure-infrastructure ,pre-test
#     - deploy-frontend:
#        requires: [test]  #run-migrations]
      - deploy-backend:
          requires: [test] #run-migrations ,test
#      - smoke-test:
#          requires: [deploy-backend, deploy-frontend]
#      - cloudfront-update:
#          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]
